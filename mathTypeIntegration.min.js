function mmlStringFormatter(e) {
  return e
    .replaceAll('"', "'")
    .replaceAll("/(<math([^>]+)>)/ig", "")
    .replaceAll("</math>", "")
    .replaceAll("<math>", "")
    .replaceAll("\xab", "<")
    .replaceAll("\xbb", ">");
}
function getImageHTML(e) {
  return `<img align="middle" src="${
    e.imgSrc
  }" data-mathml="<math>${mmlStringFormatter(
    e.mathML
  )}</math>" role="math" style="max-width: none; vertical-align: -4px;">`;
}
function closeIframe(e, t) {
  var a = document.getElementById("mathType-" + e);
  a && (a.style.display = "none"),
    t &&
      ((isEditorMessageListenerActive[e] = !1),
      window.removeEventListener("message", t));
}
function openIFrame(e) {
  var t = document.getElementById("mathType-" + e);
  t &&
    ((t.style.display = "block"),
    (t.style =
      "bottom: 0px;right: 10px;height: 422px;width: 700px;border: 1px solid lightgrey;background: #fafafa;z-index: 999999;position: fixed;bottom: 3px;right: 3px;box-shadow: rgb(0 0 0 / 16%) 0px 3px 8px 6px;display: block; border-radius: 3%;"));
}
var isEditorMessageListenerActive = {};
function setIframeCommunication(e) {
  let t = window.frames["mathType-" + e.id];
  if (
    (t && t.postMessage({ action: "setCommunication", data: "" }, "*"),
    !isEditorMessageListenerActive[e.id])
  ) {
    var a;
    (isEditorMessageListenerActive[e.id] = !0),
      (a = e),
      window.addEventListener("message", function e(t) {
        switch (t.data.action) {
          case "closeIFrame":
            closeIframe(a.id, e);
            break;
          case "openIFrame":
            openIFrame(a.id);
            break;
          case "insertImage":
            a.insertContent(getImageHTML(t.data.data)), closeIframe(a.id, e);
        }
      });
  }
}
var oneTimeCommSet = !1;
tinymce.PluginManager.add("MathType", function (e) {
  return (
    closeIframe(e.id),
    e.on("LoadContent", function () {
      e.contentWindow.document.addEventListener("click", (t) => {
        if ("img" === t.target.tagName.toLowerCase()) {
          setIframeCommunication(e);
          let a = window.frames["mathType-" + e.id];
          console.log(`${t.target.getAttribute("data-mathml")}`),
            a &&
              a.postMessage(
                {
                  action: "insertMathML",
                  data: `${mmlStringFormatter(
                    t.target.getAttribute("data-mathml")
                  )}`,
                },
                "*"
              );
        }
      });
    }),
    e.ui.registry.addButton("mathtype", {
      text: "MathType",
      onAction() {
        openIFrame(e.id), setIframeCommunication(e);
      },
    }),
    { getMetadata: () => ({ name: "MathType plugin" }) }
  );
});
